import 'dart:io';

import 'package:recase/recase.dart';
import 'package:xml/xml.dart';

import 'xml_to_map.dart';

void main(List<String> args) {
  final fontsConfigFile = File('./fonts/Warframe-Symbols.ttx');

  if (!fontsConfigFile.existsSync()) {
    // ignore: avoid_print Don't worry about it
    print('config files not found');
    exit(0);
  }

  FontGenerator(fontFile: fontsConfigFile).createIconDataFile();
}

class FontGenerator {
  FontGenerator({required this.fontFile}) {
    icons = _readIcons();
  }

  final File fontFile;

  late final Map<String, String> icons;

  /// read the icon data from the [fontFile]
  Map<String, String> _readIcons() {
    final content = fontFile.readAsStringSync();
    final document = XmlDocument.parse(content);

    final icons = xmlToIcons(document).map((key, value) {
      final name = ReCase(key).camelCase;
      return MapEntry<String, String>(name, value);
    });

    return icons;
  }

  /// creates the icon_data.g.dart containing links to the font file
  void createIconDataFile() {
    final generatedOutput = <String>[
      "part of 'icon_data.dart';\n\n",
      '// THIS FILE IS AUTOMATICALLY GENERATED!\n\n',
      '/// [WarframeIcons] offers icons from Warframe fan kit converted to an icon font\n',
      'class WarframeIcons {\n',
    ];

    icons.forEach((String iconName, String iconUnicode) {
      generatedOutput.add('''
          /// Warframe icons $iconName [IconData] with Unicode $iconUnicode
          static const IconData $iconName = WarframeIconData($iconUnicode);\n''');
    });

    generatedOutput.add('}\n');

    File('./lib/src/icon_data.g.dart').writeAsStringSync(generatedOutput.join());
  }
}
